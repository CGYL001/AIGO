import os
import shutil
import datetime
from pathlib import Path
import sys
import subprocess
import re

"""refactor_project.py
Usage:
    python scripts/refactor_project.py

This helper script automates **Phase-0** and **Phase-1** of the proposed
refactor:

1. Create a timestamped backup of the current workspace (excluding typical
   caches) under ./backup_<YYYYmmdd_HHMMSS>/
2. Create a new top-level package `aigo/`.
3. Move contents of legacy directories (`src/`, `AIGO/src/`) into the new
   package while preserving their internal structure.
4. Relocate common top-level Python scripts (run.py, start_assistant.py, etc.)
   into `aigo/cli/`.
5. Update import statements of the form `from src.` or `from AIGO.` -> `from aigo.`

The script is intentionally conservative: it *copies* files into their new
locations so the original layout remains intact for manual verification. Once
you are satisfied, you can delete the old copies.
"""

EXCLUDE_DIRS = {".git", ".pytest_cache", "__pycache__", "backup"}
BACKUP_PREFIX = "backup_"

ROOT = Path(__file__).resolve().parent.parent  # project root

def backup_project() -> Path:
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = ROOT / f"{BACKUP_PREFIX}{timestamp}"
    print(f"[+] Creating backup at {backup_dir.relative_to(ROOT)} …")
    shutil.copytree(ROOT, backup_dir, ignore=shutil.ignore_patterns(*EXCLUDE_DIRS))
    print("[+] Backup complete.\n")
    return backup_dir


def ensure_package(package_path: Path):
    package_path.mkdir(parents=True, exist_ok=True)
    init_file = package_path / "__init__.py"
    if not init_file.exists():
        init_file.write_text("\n#__init__ generated by refactor script\n")


def move_dir_contents(src_dir: Path, target_dir: Path):
    if not src_dir.exists():
        return
    print(f"[+] Relocating {src_dir} -> {target_dir}")
    ensure_package(target_dir)
    for item in src_dir.iterdir():
        target_path = target_dir / item.name
        if item.is_dir():
            shutil.copytree(item, target_path, dirs_exist_ok=True)
        else:
            shutil.copy2(item, target_path)


def relocate_legacy_sources():
    aigo_pkg = ROOT / "aigo"
    ensure_package(aigo_pkg)

    legacy_src_dirs = [ROOT / "src", ROOT / "AIGO" / "src"]
    for legacy in legacy_src_dirs:
        move_dir_contents(legacy, aigo_pkg)

    # CLI scripts
    cli_dir = aigo_pkg / "cli"
    ensure_package(cli_dir)
    for script_name in [
        "run.py",
        "start_assistant.py",
        "http_server.py",
        "simple_server.py",
        "mcp_server.py",
    ]:
        src_script = ROOT / script_name
        if src_script.exists():
            print(f"[+] Copying CLI script {script_name} -> aigo/cli/")
            shutil.copy2(src_script, cli_dir / script_name)


def update_imports(target_root: Path):
    pattern = re.compile(r"(from|import)\s+(src|AIGO)([\.\w]*)")
    for py_file in target_root.rglob("*.py"):
        text = py_file.read_text(encoding="utf-8")
        new_text = pattern.sub(lambda m: f"{m.group(1)} aigo{m.group(3)}", text)
        if text != new_text:
            py_file.write_text(new_text, encoding="utf-8")
            print(f"    rewrote imports in {py_file.relative_to(ROOT)}")


def main():
    backup_project()
    relocate_legacy_sources()
    update_imports(ROOT / "aigo")
    print("\n[✓] Initial restructure steps completed.")
    print("    Please run tests to validate:  pytest -q")


if __name__ == "__main__":
    main() 