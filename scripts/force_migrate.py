"""force_migrate.py

A simplified migration script that copies core modules to the aigo package structure
without requiring tests to pass. This can be used when experiencing test collection issues
or other test-related problems that shouldn't block the migration.

Usage:
    python scripts/force_migrate.py
"""
import shutil
from pathlib import Path
import re
import datetime
import sys

ROOT = Path(__file__).resolve().parent.parent
AIGO = ROOT / "aigo"
BACKUP_DIR = ROOT / f"force_backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"

# Add project root to Python path
sys.path.insert(0, str(ROOT))

SUBPACKAGES = [
    AIGO / "adapters",
    AIGO / "processors", 
    AIGO / "runtime",
    AIGO / "cli",
    AIGO / "modules",
    AIGO / "models",  # Add models dir for future model adapters
]

# Core modules to migrate
MAPPING = {
    # src path               -> dest path within aigo
    "github_adapter_clean.py": AIGO / "adapters" / "github.py",
    "model_manager.py": AIGO / "runtime" / "model_manager.py",
    "http_server.py": AIGO / "runtime" / "server_http.py",
    "simple_server.py": AIGO / "runtime" / "server_simple.py",
    "mcp_server.py": AIGO / "runtime" / "server_mcp.py",
    "run.py": AIGO / "cli" / "run.py",
    "start_assistant.py": AIGO / "cli" / "start_assistant.py",
}

# Directories to copy fully
DIR_MIGRATIONS = {
    ROOT / "src" / "modules": AIGO / "modules",
    ROOT / "AIGO" / "src" / "modules": AIGO / "modules",
    ROOT / "src" / "services": AIGO / "services",
}

# Import pattern replacements
IMPORT_REWRITES = [
    (re.compile(r"\bsrc\.modules\."), "aigo.modules."),
    (re.compile(r"\bAIGO\.src\.modules\."), "aigo.modules."),
    (re.compile(r"\bsrc\.services\."), "aigo.services."),
    (re.compile(r"\bAIGO\.src\.services\."), "aigo.services."),
    (re.compile(r"github_adapter_clean"), "aigo.adapters.github"),
    (re.compile(r"model_manager"), "aigo.runtime.model_manager"),
    (re.compile(r"(^|\.)http_server"), "aigo.runtime.server_http"),
    (re.compile(r"(^|\.)simple_server"), "aigo.runtime.server_simple"),
    (re.compile(r"(^|\.)mcp_server"), "aigo.runtime.server_mcp"),
    (re.compile(r"\bsrc\."), "aigo."),
    (re.compile(r"\bAIGO\.src\."), "aigo."),
]


def ensure_packages():
    """Ensure all subpackage directories exist with __init__.py files."""
    for pkg in SUBPACKAGES:
        pkg.mkdir(parents=True, exist_ok=True)
        init = pkg / "__init__.py"
        if not init.exists():
            init.write_text(f"""
# Auto-generated by force_migrate.py
\"\"\"
{pkg.name} package for AIgo.
\"\"\"
""")
            print(f"[+] Created {init}")


def copy_and_rewrite(src: Path, dst: Path):
    """Copy file and rewrite imports to use new package structure."""
    dst.parent.mkdir(parents=True, exist_ok=True)
    shutil.copy2(src, dst)
    
    # Robust text decoding with fallbacks
    raw = dst.read_bytes()
    encodings = ["utf-8", "utf-8-sig", "utf-16", "utf-16-le", "latin-1"]
    txt = None
    
    for enc in encodings:
        try:
            txt = raw.decode(enc)
            break
        except UnicodeDecodeError:
            continue
    
    if txt is None:
        print(f"[!] Could not decode {dst} with common encodings; skipping import rewrite.")
        return

    # Apply all import rewrites
    for pattern, repl in IMPORT_REWRITES:
        txt = pattern.sub(repl, txt)
    
    # Clean null bytes
    txt = txt.replace("\x00", "")
    
    # Write back with consistent encoding
    dst.write_text(txt, encoding="utf-8")


def backup_original(src: Path):
    """Move the original file to backup directory."""
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    rel_path = src.relative_to(ROOT) if src.is_relative_to(ROOT) else Path(src.name)
    backup_path = BACKUP_DIR / rel_path
    backup_path.parent.mkdir(parents=True, exist_ok=True)
    shutil.move(str(src), backup_path)


def main():
    """Run the forced migration process."""
    print("[*] Starting forced migration - ignoring test failures")
    
    # Step 1: Ensure package structure exists
    ensure_packages()
    
    # Step 2: Copy individual modules
    moved_files = []
    for rel_src, dst in MAPPING.items():
        src_path = ROOT / rel_src
        if src_path.exists():
            copy_and_rewrite(src_path, dst)
            moved_files.append(src_path)
            print(f"[+] Copied & rewrote {rel_src} -> {dst.relative_to(ROOT)}")
    
    # Step 3: Copy directory trees
    for src_dir, dst_dir in DIR_MIGRATIONS.items():
        if src_dir.exists():
            print(f"[+] Copying directory tree {src_dir} -> {dst_dir}")
            dst_dir.mkdir(parents=True, exist_ok=True)
            
            # Copy files individually to handle encoding issues
            for src_file in src_dir.rglob("*.py"):
                # Skip __pycache__ directories
                if "__pycache__" in str(src_file):
                    continue
                    
                rel_path = src_file.relative_to(src_dir)
                dst_file = dst_dir / rel_path
                dst_file.parent.mkdir(parents=True, exist_ok=True)
                
                copy_and_rewrite(src_file, dst_file)
    
    # Step 4: Create compatibility stub
    stub_dir = ROOT / "src"
    if stub_dir.exists() and not (stub_dir / "__init__.py").exists():
        stub_init = stub_dir / "__init__.py"
        stub_init.write_text(
            """
# Auto-generated compatibility shim.
import importlib, types, sys as _sys

# Redirect the top-level 'src' package to 'aigo'
_aigo = importlib.import_module('aigo')
_sys.modules[__name__] = _aigo

# Also expose 'src.modules' -> 'aigo.modules' for backward compatibility
_sys.modules['src.modules'] = importlib.import_module('aigo.modules')
"""
        )
        print("[+] Created compatibility stub 'src' -> 'aigo'")
    
    print("\n[âœ“] Migration completed successfully - review code before deployment")


if __name__ == "__main__":
    main() 